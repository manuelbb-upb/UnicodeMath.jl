"""
    UnicodeMath

A Julia package inspired by the great LaTeX package `unicode-math`.
As a user you should care mainly about [`apply_style`](@ref) and the globally
configured functions [`_sym`](@ref) and `symbf`, `symit`, etc.
The latter are configured with [`global_config!`](@ref)
"""
module UnicodeMath
#=
# Typography Terminology

When it comes to typography, common concepts have different names in different contexts.
Here is what Wikipedia has to say about ‚Äútypeface‚Äù and ‚Äúfont‚Äù:

> A typeface (or font family) is a design of letters, numbers and other symbols, 
> to be used in printing or for electronic display.
> Most typefaces include variations in size (e.g., 24 point), weight (e.g., light, bold), 
> slope (e.g., italic), width (e.g., condensed), and so on. 
> Each of these variations of the typeface is a font.

  Wikipedia contributors, "Typeface," Wikipedia, The Free Encyclopedia, 
  https://en.wikipedia.org/w/index.php?title=Typeface&oldid=1309901840 
  (accessed September 24, 2025).

E.g., ‚ÄúTimes‚Äù is a typeface family, and ‚ÄúTimes Roman‚Äù and ‚ÄúTimes Italic‚Äù are 
typefaces/font families within that typeface, and ‚ÄúTimes Roman 10‚Äù is a font within 
the typeface ‚ÄúTimes Roman‚Äù.

According to https://texdoc.org/serve/fntguide/0, LaTeX uses 
* ‚Äúfamily‚Äù to refer to a typeface/font family, e.g. ‚ÄúCMU Serif‚Äù,
* ‚Äúseries‚Äù for weight and spacing,
* ‚Äúshape‚Äù is the form of the letters, e.g., ‚Äúitalic‚Äù or ‚Äúupright‚Äù.
Together with ‚Äúsize‚Äù, a font can be selected.

For maths, commands such as `\mathbf` are defined via
`\DeclareMathAlphabet {‚ü®math-alph‚ü©} {‚ü®encoding‚ü©} {‚ü®family‚ü©} {‚ü®series‚ü©} {‚ü®shape‚ü©}`.
Hence, a ‚Äúmath-alphabet‚Äù is really just a specific font 
(that has glyphs for a subset of mathematical characters).
In `unicode-math`, the new wrapper command is aptly named `\setmathfontface`.
It is okay to use ‚Äúalphabet‚Äù in a hand-wavy manner, because even Wikipedia and 
package documentation does so.

> Every typeface is a collection of glyphs, each of which represents an individual 
> letter, number, punctuation mark, or other symbol. 
> The same glyph may be used for characters from different writing systems, 
> e.g. Roman uppercase A looks the same as Cyrillic uppercase –ê and Greek uppercase alpha (Œë). 
> There are typefaces tailored for special applications, such as cartography, astrology or mathematics.

  Wikipedia contributors, "Typeface," Wikipedia, The Free Encyclopedia, 
  https://en.wikipedia.org/w/index.php?title=Typeface&oldid=1309901840 
  (accessed September 24, 2025).

In accordance with https://en.wikipedia.org/wiki/Glyph, the concept of a letter, number, etc.
is a grapheme-like unit, or an (abstract) character.
A glyph is its graphical representation.

In Unicode, collections of characters often form 
[scripts](https://en.wikipedia.org/wiki/Script_(Unicode)),
and usually, style information is not encoded in scripts.

Except for math charactes, **which do not constitute a script**.
Unicode has various styles for many mathematical characters.
For example, the abstract character ‚ÄúA‚Äù has styled variants
‚ÄúùêÄ‚Äù (MATHEMATICAL BOLD CAPITAL A) or ‚Äúùê¥‚Äù (MATHEMATICAL ITALIC CAPITAL A).
Usually style variants (series or shape) would be provided by different fontfaces,
but math fonts contain these stylized variants themselves.

The LaTeX package `unicode-math` has commands like `\symbf` that map between different
styles and emulate legacy commands, but do not switch fontfaces for mathematical characters
that have style variants.

# ## Package Naming Conventions 

We mimic some of the functionality of `unicode-math` for string formatting in Julia.
To this end, we define our own ‚Äúalphabets‚Äù, which are sets of abstract characters.
E.g. `:num` are numbers, `:latin` are lowercase Latin characters, and `:Greek` 
are uppercase Greek characters. 
There are also singleton sets to allow for granular configuration.

Within an alphabet each abstract character has a unique ‚Äúname‚Äù, i.e. "1" or "a" or "Alpha".

Then there are styles, i.e., combinations of series and shape properties.
A math font can provide glyphs for styles defined in `base_styles` for the characters in our 
alphabets.
There are styles like `:bf` (bold) or `:sf` (sans-serif) for which the mapping is 
more complicated.
We might wish to have bold italic letters by default, i.e., `:bf` should alias `:bfit`
depending on a (global) configuration.

For us, specific fonts are not relevant, so we call the Unicode characters that are mapped 
‚Äúglyphs‚Äù.
It is unavoidable that sometimes the terms ‚Äúcharacter‚Äù/‚Äúglyph‚Äù/‚Äúsymbol‚Äù are used 
synonymously, but hopefully context disolves confusion.
It doesn't help that Julia has types `Symbol` and `Char`.
Indeed, a glyph is represented by a `Char`.
=#

# # Simple Global Definitions
# External Dependencies:
import UnPack: @unpack

# Simple Type Constants:
const Nothymbol = Union{Nothing, Symbol}
const SpecTup = @NamedTuple{Greek::Symbol, greek::Symbol, Latin::Symbol, latin::Symbol}

# # Extra LaTeX Commands
# Include standalone file defining `extra_commands::Dict{Symbol,UCMCommand}`.
# The dict has custom commands defined in `unicode-math` 
# which are extracted from the LaTeX source code.  
include("extra_commands.jl")  # `extra_commands`

# # Styling
# Symbols for base styles  (excluding derived styles like `bf`, `sf`, `bfsfup`):
const base_styles = (
    :up, :it,  
    :bfup, :bfit, 
    :sfup, :sfit, 
    :bfsfup, :bfsfit, 
    :tt, 
    :bb, :bbit,
    :cal, :bfcal, 
    :frak, :bffrak
)

# Symbols for every possible style:
const all_styles = (base_styles..., :bf, :sf, :bfsf)

# Alphabet definitions:
include("ucmchars.jl")
const Glyph = Union{Char, UCMChar}

# A nested dict that is needed for mapping between styles:
const ucmchars_by_alphabet_style_name = all_ucmchars()
# A dict mapping `Char`s to `UCMChar`s (which store meta data):
const chars_to_ucmchars = inverse_ucm_dict(ucmchars_by_alphabet_style_name)

# The basic styling command, needing configuration:
include("apply_style.jl")

# ## Global Styling Commands
# Prepare defaults for global styling commands:
const default_config_dicts = config_dicts()
const default_substitutions = default_config_dicts.substitutions
const default_aliases = default_config_dicts.aliases

# Store internal references so that the actual config dicts can be modified:
const default_substitutions_ref = Ref(default_substitutions)
const default_aliases_ref = Ref(default_aliases)

"""
    global_config!(; kwargs...)
    global_config!(cfg::UCMConfig)

Configure how styling functions such as `symbf` act.
Take the same keyword arguments as [`UCMConfig`](@ref).
"""
function global_config!(; kwargs...)
    global default_substitutions_ref, default_aliases_ref
    s, a = config_dicts(; kwargs...)
    default_substitutions_ref[] = s
    default_aliases_ref[] = a
    return nothing
end

function global_config!(cfg::UCMConfig)
    @unpack math_style_spec, normal_style_spec, bold_style_spec, sans_style, partial, nabla = cfg
    return global_config!(; 
        math_style_spec, normal_style_spec, bold_style_spec, sans_style, partial, nabla)
end

# Basic global styling command:
"""
    _sym(glyph::Union{Char, UCMChar, AbstractString})
    _sym(glyph::Union{Char, UCMChar, AbstractString}, trgt_style::Symbol)

Try to style `glyph` according to global configuration, which is set by 
[`global_config!`](@ref).
"""
function _sym(x::Union{AbstractString,Glyph}, trgt_style::Symbol...)
    global default_substitutions_ref, default_aliases_ref

    return apply_style(
        x,
        default_substitutions_ref[],
        default_aliases_ref[],
        trgt_style...
    )
end

# Derive specific styling functions like `symbf`:
for sn in all_styles
    f = Symbol("sym", sn)
    @eval $f(x::Union{AbstractString, Glyph}) = _sym(x, $(Meta.quot(sn)))
end

end#module